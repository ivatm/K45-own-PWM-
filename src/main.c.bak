#include <stdlib.h>
#include <signal.h>
#include <time.h>

#include <string.h>
#include <sys/timeb.h>

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

#include "ADS1256.h"

#include "configsK45.h"
#include "Indication.h"
#include "ADCHeader.h"
#include "modulSPI.h"

#include "pthread.h"

void *a`Thread();
pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;


uint16_t K45GlobalInit(void)
{
   uint16_t Result;
   boolean PowerModulconfigured; // Common SPI interface for Indicator and RTmodule

   PowerModulconfigured = periferal_SPI1_Init();

   bcm2835_gpio_set(IND_CS_PIN);
   bcm2835_gpio_set(MODUL_ISP_PIN);

   if (PowerModulconfigured)
   {
      Result = TRUE;
   }
   else
   {
      Result = FALSE;
   }

   if (ADC_Init())
   {
      Result = TRUE;
   }
   else
   {
      Result = FALSE;
   }

   return Result;
}

int main(void)
{
   UDOUBLE WorkLocal;
   uint16_t WorkOut;
   uint8_t Point;
   float x;

   K45GlobalInit();

   WorkLocal = 0;

   while (1)
   {
      WorkLocal = ADS1256_GetChannalValue(0);

      x = (WorkLocal >> 7)*5.0/0xffff;

      //x = (x*10);

      printf(" %d \r\n", WorkOut);

      if (x < 1)
      {
         Point = 3;
         WorkOut = (uint16_t)(x*1000);
      }
      else if (x < 10)
      {
         Point = 3;
         WorkOut = (uint16_t)(x*1000);
      }
      else if (x < 100)
      {
         Point = 2;
         WorkOut = (uint16_t)(x*100);
      }
      else if (x < 1000)
      {
         Point = 1;
         WorkOut = (uint16_t)(x*10);
      }
      else
      {
         Point = 0;
         WorkOut = (uint16_t)(x);
      }

      SetIndicator(0, Point, WorkOut);

      // Transfer the message
      TransmBuf[0] = '>';
      TransmBuf[1] = (char)keHeaterSetpoint;
      TransmBuf[2] = (char)WorkOut;
      TransmBuf[3] = (char)(WorkOut>>8);
      TransmBuf[4] = 0;
      TransmBuf[5] = '<';

      TransmBuf[kMsgLength - 2] = CheckSumCalcul(&TransmBuf[0]);
      transferMsG(&RecBuf[0], &TransmBuf[0]);

      delay (100);

   }

   return 0;
}
